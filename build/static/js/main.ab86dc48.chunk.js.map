{"version":3,"sources":["components/InfoBox.js","components/LineGraph.js","util.js","components/Map.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","active","color","total","onClick","Card","className","style","CardContent","Typography","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","dataType","chartData","date","newDataPoint","x","y","push","LineGraph","caseType","graphBGColor","country","useState","setData","useEffect","a","fetch","then","response","json","timeline","length","datasets","backgroundColor","casesTypeColors","hex","multiplier","recovered","deaths","sortData","sortedData","sort","b","prettyPrintStat","stat","Map","countries","casesType","center","zoom","TileLayer","url","noWrap","minZoom","attribution","map","Circle","key","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","backgroundImage","flag","showDataOnMap","Table","casesColors","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setcasesType","name","iso3","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","filter","c","capitalize","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ab86dc48.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\r\nimport React from 'react';\r\nimport './InfoBox.css'\r\n\r\nfunction InfoBox({title, cases, active, color, total, onClick}) {\r\n    return (\r\n        <Card onClick={onClick} className={`infoBox ${active && 'infoBox--selected'}`}\r\n        style={{'borderColor': color}}>\r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\"  color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                <h2 className=\"infoBox__cases\" style={{'color': color}}>{cases}</h2>\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0\r\n        }\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: (tooltipItem, data) => {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            }\r\n        }\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: 'time',\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\"\r\n                }\r\n            }\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false\r\n                },\r\n                ticks: {\r\n                    callback: (value, index, values) => {\r\n                        return numeral(value).format(\"0a\");\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\nconst buildChartData = (data, dataType = 'cases') => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n\r\n    if (data) {\r\n        for (let date in data.cases) {\r\n            if (lastDataPoint) {\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: data[dataType][date] - lastDataPoint\r\n                }\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[dataType][date];\r\n        };\r\n    }\r\n\r\n    return chartData;\r\n}\r\n\r\n\r\nfunction LineGraph({ caseType = 'cases', graphBGColor, className, country }) {\r\n    const [data, setData] = useState({});\r\n    //\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\"\r\n\r\n    useEffect(() => {\r\n        //effect\r\n        (async () => {\r\n            await fetch(`https://disease.sh/v3/covid-19/historical/${country === 'worldwide' ? 'all' : country}?lastdays=120`)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    let chartData;\r\n                    if (country === 'worldwide') {\r\n                        chartData = buildChartData((data), caseType);\r\n                    } else {\r\n                        chartData = buildChartData((data.timeline), caseType);\r\n                    }\r\n\r\n                    setData(chartData);\r\n                });\r\n        })();\r\n\r\n\r\n        return () => {\r\n            //cleanup\r\n        }\r\n    }, [caseType, country])\r\n\r\n    return (\r\n        <div className={className}>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    options={options}\r\n                    data={{\r\n                        datasets: [{\r\n                            backgroundColor: graphBGColor,\r\n                            color: '#cc1034',\r\n                            data: data\r\n                        }]\r\n                    }}\r\n                />\r\n            )}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#FF5722\",\r\n    multiplier: 800\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 800\r\n  },\r\n  deaths: {\r\n    hex: \"#f31a0a\",\r\n    multiplier: 2000\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const capitalize = (string) => {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const milliSecondsToDateTime = (s) => s?new Date(+s).toLocaleString('EN-GB'):'';\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      key={country.country}\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"../util\";\r\n\r\nconst Map=({ countries, casesType, center, zoom })=> {\r\n  // console.log(countries)\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          noWrap = 'true'\r\n          minZoom = '1.4'\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from 'numeral';\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n        <table>\r\n            <tbody>\r\n            {countries.map(({ country, cases })=>(\r\n                <tr key={country}>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n            ))}\r\n            </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import { capitalize, Card, CardContent, FormControl, MenuItem, Select } from '@material-ui/core';\nimport React, { useState, useEffect, Fragment } from 'react';\nimport './App.css';\nimport InfoBox from './components/InfoBox';\nimport LineGraph from './components/LineGraph';\nimport Map from './components/Map';\nimport Table from './components/Table';\nimport { prettyPrintStat, sortData } from './util';\nimport \"leaflet/dist/leaflet.css\";\n\n//countries: https://disease.sh/v3/covid-19/countries\n\nconst casesColors = {\n  'cases': \"#FF5722\",\n  'recovered': \"#7dd71d\",\n  'deaths': \"#f31a0a\"\n}\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: 0 });\n  const [mapZoom, setMapZoom] = useState(2);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setcasesType] = useState('cases');\n  // const [lastUpdate, setLastUpdate] = useState('');\n\n  useEffect(() => {\n    //effect\n    (async () => {\n      await fetch('https://disease.sh/v3/covid-19/all')\n        .then(response => response.json())\n        .then(data => {\n          setCountryInfo(data);\n          // setLastUpdate(data.updated);\n        });\n    })();\n    return () => {\n      //cleanup\n    }\n  }, [])\n\n  useEffect(() => {\n    //effect\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then(response => response.json())\n        .then(data => {\n          const countries = data.map(country => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso3\n            }\n          ));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n\n          setMapCountries(data)\n          setCountries(countries);\n          //setLastUpdate(data.updated);\n        });\n    };\n\n    getCountriesData();\n    return () => {\n      //cleanup\n    }\n  }, [])\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url = countryCode === 'worldwide'\n      ? 'https://disease.sh/v3/covid-19/all'\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n\n        setCountry(countryCode);\n        //all data from the country response\n        setCountryInfo(data);\n        if (countryCode === 'worldwide') {\n          setMapZoom(2);\n          setMapCenter([34.80746, 0]);\n        } else {\n          setMapZoom(4);\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        }\n\n        // setLastUpdate(data.updated);\n\n      });\n  };\n\n  return (\n    <Fragment>\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          {/* <div>\n            \n            <h4 className=\"author\">By Haitham Elbaz</h4>\n            <p className=\"last__update\">{country === 'worldwide' ? 'Worldwide' :\n              countries.filter(c => c.value === country)[0]?.name} Data Updated at\n           &nbsp;{milliSecondsToDateTime(lastUpdate)}\n            </p>\n          </div> */}\n\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country} >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map(country => (\n                <MenuItem key={country.name} value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__status\">\n          <InfoBox title=\"Coronavirus Cases\"\n            onClick={e => setcasesType('cases')}\n            active={casesType === 'cases'}\n            color={casesColors.cases}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)} />\n          <InfoBox title=\"Recovered\"\n            onClick={e => setcasesType('recovered')}\n            active={casesType === 'recovered'}\n            color={casesColors.recovered}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)} />\n          <InfoBox title=\"Deaths\"\n            onClick={e => setcasesType('deaths')}\n            active={casesType === 'deaths'}\n            color={casesColors.deaths}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)} />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__rigth\">\n        <CardContent>\n          <h3>Situation by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">{country === 'worldwide' ? 'Worldwide' : countries.filter(c => c.value === country)[0]?.name} {capitalize(casesType)} In 120 days</h3>\n          <LineGraph country={country} caseType={casesType} graphBGColor={casesColors[casesType]} className=\"app__graph\" />\n        </CardContent>\n      </Card>\n    </div>\n      <div id=\"footer\">\n\t\t<p>Haitham Elbaz © 2020</p>\n\t</div>\n  </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}